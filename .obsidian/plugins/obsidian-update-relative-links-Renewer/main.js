/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => UpdateRelativeLinksPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// lib/path.ts
var SEP = "/";
function dirname(path) {
  return stackToPath(pathToStack(path).slice(0, -1));
}
function relative(from, to) {
  if (!from) {
    return to;
  }
  const fromStack = pathToStack(from);
  const toStack = pathToStack(to);
  const firstDiffIdx = fromStack.findIndex((value, idx) => value != toStack[idx]);
  const resultStack = [];
  for (let i = firstDiffIdx; i < fromStack.length - 1; i++) {
    resultStack.push("..");
  }
  for (let i = firstDiffIdx; i < toStack.length; i++) {
    resultStack.push(toStack[i]);
  }
  return stackToPath(resultStack);
}
function pathToStack(path) {
  return path.split(SEP);
}
function stackToPath(stack) {
  return stack.join(SEP);
}

// main.ts
var import_fs = require("fs");
var ConfirmModal = class extends import_obsidian.Modal {
  constructor(app, content, onConfirm) {
    super(app);
    this.content = content;
    this.onConfirm = onConfirm;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Update Releate Links Plugin" });
    contentEl.createEl("p", { text: this.content });
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Yes").setCta().onClick(() => {
      this.close();
      this.onConfirm();
    })).addButton((btn) => btn.setButtonText("No").onClick(() => {
      this.close();
    }));
  }
  onClose() {
    this.contentEl.empty();
  }
};
var UpdateRelativeLinksPlugin = class extends import_obsidian.Plugin {
  async onload() {
    const { app } = this;
    const { metadataCache, vault } = app;
    const message = "[Renewer] This command will modify all links in the entire vault (not just the current file) to relative paths, and this action cannot be undone. It is recommended that you back up the vault in advance. Please confirm whether you want to execute the command.";
    this.addCommand({
      id: "update-all-relative-links Renewer",
      name: "Update all relative links Renewer",
      callback() {
        new ConfirmModal(app, message, () => {
          const promises = vault.getMarkdownFiles().map((file) => replace(vault.adapter, file, false));
          Promise.all(promises).then((linkCounts) => {
            const updatedLinkCounts = linkCounts.filter((count) => count > 0);
            const linkCount = updatedLinkCounts.reduce((sum, count) => sum + count, 0);
            const fileCount = updatedLinkCounts.length;
            new import_obsidian.Notice(`Update ${linkCount} links in ${fileCount} file${fileCount > 1 ? "s" : ""}.`);
          }).catch((err) => {
            new import_obsidian.Notice("Update links error, see console.");
            console.error(err);
          });
        }).open();
      }
    });
    this.registerEvent(vault.on("rename", (file, oldPath) => {
      var _a;
      if (!oldPath || !file.path.toLocaleLowerCase().endsWith(".md") || ((_a = file.parent) == null ? void 0 : _a.path) === dirname(oldPath)) {
        return;
      }
      if (file instanceof import_obsidian.TFile) {
        const adapter = app.vault.adapter;
        setTimeout(() => replace(vault.adapter, file, true), 100);
      }
    }));
    async function replace(root, file, notice) {
      var _a, _b;
      const metadata = metadataCache.getFileCache(file);
      const links = [...(_a = metadata == null ? void 0 : metadata.links) != null ? _a : [], ...(_b = metadata == null ? void 0 : metadata.embeds) != null ? _b : []];
      const replacePairs = links.map(({ link, original }) => {
        var _a2;
        const linkPath = link.replace(/#.*$/, "");
        if (!linkPath) {
          return null;
        }
        const linkFile = metadataCache.getFirstLinkpathDest(linkPath, file.path);
        if (!linkFile) {
          return null;
        }
        const newLinkPath = ((_a2 = file.parent) == null ? void 0 : _a2.path) === "/" ? linkFile.path : relative(file.path, linkFile.path);
        if (linkPath === newLinkPath) {
          var bCheck = false;
          const titleIndices = findBracketIndicesOfTitle(original);
          if (titleIndices && 2 < titleIndices.closeIndex - titleIndices.openIndex) {
            const altText = original.substring(titleIndices.openIndex, titleIndices.closeIndex);
            if (altText.includes("/"))
              bCheck = true;
          }
          const linkIndices = findParenthesisIndicesOfURL(original);
          if (linkIndices) {
            const url = original.substring(linkIndices.openIndex, linkIndices.closeIndex);
            if (url.includes(".."))
              bCheck = true;
          }
          if (!bCheck)
            return null;
        }
        const newOriginal = replaceOriginal(root.getBasePath() + "/" + file.path, original, linkPath, newLinkPath);
        if (linkPath === newLinkPath) {
          return null;
        }
        return [original, newOriginal];
      }).filter((pair) => pair);
      if (!(replacePairs == null ? void 0 : replacePairs.length)) {
        return 0;
      }
      try {
        const content = await vault.read(file);
        const replacedContent = replacePairs.reduce((tmpContent, pair) => {
          return (pair == null ? void 0 : pair.length) === 2 ? tmpContent.replace(pair[0], pair[1]) : tmpContent;
        }, content);
        await vault.modify(file, replacedContent);
        const msg = `Update ${replacePairs.length} links in ${file.path}.`;
        console.log(msg);
        if (notice) {
          new import_obsidian.Notice(msg);
        }
        return replacePairs.length;
      } catch (e) {
        console.error(e);
        if (notice) {
          new import_obsidian.Notice("Update links error, see console.");
        }
        throw e;
      }
    }
    function findBracketIndicesOfTitle(original) {
      const openIndex = original.indexOf("[");
      if (openIndex === -1)
        return null;
      const closeIndex = original.indexOf("](", openIndex + 1);
      if (closeIndex === -1)
        return null;
      return { openIndex, closeIndex };
    }
    function findParenthesisIndicesOfURL(str) {
      const openIndex = str.indexOf("(");
      if (openIndex === -1)
        return null;
      const closeIndex = str.indexOf(")", openIndex + 1);
      if (closeIndex === -1)
        return null;
      return { openIndex, closeIndex };
    }
    function getFileName(path) {
      const segments = path.split("/");
      return decodeURIComponent(segments.pop() || "");
    }
    function getFullDirectory(path) {
      const parts = path.split("/");
      parts.pop();
      return parts.join("/");
    }
    function getLastDirectory(path) {
      const parts = path.split("/");
      return parts.length >= 2 ? parts[parts.length - 2] : "";
    }
    function ensureDirSync(dirPath) {
      const fs2 = require("fs");
      if (!fs2.existsSync(dirPath)) {
        fs2.mkdirSync(dirPath, { recursive: true });
      }
    }
    async function copyFileAsync(src, dest) {
      try {
        await import_fs.promises.access(src);
        try {
          await import_fs.promises.copyFile(src, dest);
        } catch (copyErr) {
          new import_obsidian.Notice("-2 \uBCF5\uC0AC \uC2E4\uD328");
          console.error(copyErr);
        }
      } catch (err) {
        new import_obsidian.Notice("-1 \uC6D0\uBCF8 \uC5C6\uC74C");
        console.error(err);
      }
    }
    function replaceOriginal(filePath, original, link, newLink) {
      const titleIndices = findBracketIndicesOfTitle(original);
      if (titleIndices && 2 < titleIndices.closeIndex - titleIndices.openIndex) {
        const tmplinkIndices = findParenthesisIndicesOfURL(original);
        const url = original.substring(tmplinkIndices.openIndex + 1, tmplinkIndices.closeIndex);
        if (url.includes(".md")) {
          const Title = original.substring(titleIndices.openIndex + 1, titleIndices.closeIndex);
          original = original.replace(Title, getFileName(Title));
        } else {
          const Title = original.substring(0, titleIndices.closeIndex);
          if (Title.includes("![")) {
            const Title2 = original.substring(titleIndices.openIndex + 1, titleIndices.closeIndex);
            original = original.replace(Title2, getFileName(link));
          } else {
            original = original.replace(Title, getFileName(link));
          }
        }
      } else {
        original = original.replace("[]", "[" + link + "]");
      }
      const linkIndices = findParenthesisIndicesOfURL(original);
      if (linkIndices) {
        const url = original.substring(linkIndices.openIndex + 1, linkIndices.closeIndex);
        if (url.includes("..") && !url.includes(".md")) {
          const fileDir = getFullDirectory(filePath);
          const newUrlDir = fileDir + "/" + getLastDirectory(link);
          ensureDirSync(newUrlDir);
          copyFileAsync(fileDir + "/" + link, newUrlDir + "/" + getFileName(link));
          newLink = getLastDirectory(link) + "/" + getFileName(link);
        }
        let newOriginal = replaceWithFormat(original, "(" + url + ")", "(" + newLink + ")", (s) => s.replace(/ /g, "%20"));
        if (original === newOriginal) {
          newOriginal = replaceWithFormat(original, "(" + url + ")", "(" + newLink + ")", encodeURI);
        }
        if (original === newOriginal) {
          newOriginal = original.replace(/^(!?\[.*?\]).*$/, `$1(${encodeURI(newLink)})`);
        }
        return newOriginal;
      }
      return null;
    }
    function replaceWithFormat(str, from, to, format) {
      return str.replace(format(from), format(to));
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
